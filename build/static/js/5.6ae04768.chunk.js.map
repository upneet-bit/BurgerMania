{"version":3,"sources":["components/Order/Order.module.css","components/Order/Order.js","containers/Orders/Orders.js"],"names":["module","exports","Order","props","ingredients","ingredientName","push","name","amount","ingredientOutput","map","ig","style","textTransform","display","margin","border","padding","className","classes","Number","parseFloat","price","toFixed","Orders","this","onFetchOrders","token","userId","orders","Spinner","loading","order","id","Component","connect","state","auth","dispatch","actions","withErrorHandler","axios"],"mappings":"uFACAA,EAAOC,QAAU,CAAC,MAAQ,uB,wGCqCXC,EAnCD,SAACC,GACX,IAAMC,EAAa,GAEnB,IAAI,IAAIC,KAAkBF,EAAMC,YAC5BA,EAAYE,KACR,CACCC,KAAMF,EACNG,OAAOL,EAAMC,YAAYC,KAKlC,IAAMI,EAAkBL,EAAYM,KAAI,SAAAC,GACpC,OAAM,uBACNC,MAAO,CACHC,cAAe,aACfC,QAAS,eACTC,OAAQ,QACRC,OAAQ,iBACRC,QAAQ,OANN,UASDN,EAAGJ,KATF,IASSI,EAAGH,OATZ,MAQDG,EAAGJ,SAKR,OACI,sBAAKW,UAAWC,IAAQjB,MAAxB,UACI,8CAAiBO,EAAjB,OACA,uCAAS,0CAAaW,OAAOC,WAAWlB,EAAMmB,OAAOC,QAAQ,MAA7D,W,wCCxBVC,E,uKAEF,WACIC,KAAKtB,MAAMuB,cAAcD,KAAKtB,MAAMwB,MAAOF,KAAKtB,MAAMyB,U,oBAG1D,WACI,IAAIC,EAAQ,cAACC,EAAA,EAAD,IAYZ,OAXIL,KAAKtB,MAAM4B,UACXF,EAAQJ,KAAKtB,MAAM0B,OAAOnB,KAAI,SAAAsB,GAC1B,OACI,cAAC,EAAD,CAEA5B,YAAa4B,EAAM5B,YACnBkB,MAAOU,EAAMV,OAFRU,EAAMC,QAQnB,8BACKJ,Q,GArBIK,aA0CNC,uBAfS,SAAAC,GACpB,MAAM,CACFP,OAAQO,EAAMJ,MAAMH,OACpBE,QAASK,EAAMJ,MAAMD,QACrBJ,MAAQS,EAAMC,KAAKV,MACnBC,OAAQQ,EAAMC,KAAKT,WAID,SAAAU,GACtB,MAAM,CACFZ,cAAe,SAACC,EAAOC,GAAR,OAAkBU,EAASC,IAAoBZ,EAAOC,QAI9DO,CAA6CK,YAAiBhB,EAAQiB","file":"static/js/5.6ae04768.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Order\":\"Order_Order__d9uww\"};","import React from 'react';\r\nimport classes from \"./Order.module.css\"\r\n\r\nconst Order = (props) => {\r\n    const ingredients= [];\r\n\r\n    for(let ingredientName in props.ingredients){\r\n        ingredients.push(\r\n            {\r\n             name: ingredientName ,\r\n             amount:props.ingredients[ingredientName]\r\n            }\r\n        )\r\n    }\r\n\r\n    const ingredientOutput= ingredients.map(ig =>{\r\n        return<span \r\n        style={{\r\n            textTransform: 'capitalize',\r\n            display: 'inline-block',\r\n            margin: '0 8px',\r\n            border: '1px solid #ccc',\r\n            padding:'5px'\r\n        }}\r\n        key={ig.name}>\r\n            {ig.name}({ig.amount}) \r\n            </span>\r\n    })\r\n\r\n        return(\r\n            <div className={classes.Order} >\r\n                <p>Ingredients: {ingredientOutput} </p>\r\n                <p>Price:<strong>USD {Number.parseFloat(props.price).toFixed(2)}</strong> </p>\r\n            </div>\r\n\r\n        );\r\n         \r\n}\r\nexport default Order;","import React, { Component } from 'react';\r\nimport Order from '../../components/Order/Order';\r\nimport axios from \"../../axios/axios-orders\";\r\nimport withErrorHandler from \"../../hoc/withErrorHandler/withErrorHandler\";\r\nimport * as actions from '../../store/actions';\r\nimport { connect } from 'react-redux';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\n\r\nclass Orders extends Component {\r\n    \r\n    componentDidMount(){\r\n        this.props.onFetchOrders(this.props.token, this.props.userId);\r\n    }\r\n\r\n    render() {\r\n        let orders= <Spinner/>;\r\n        if(!this.props.loading){\r\n            orders= this.props.orders.map(order =>{\r\n                return(\r\n                    <Order\r\n                    key={order.id}\r\n                    ingredients={order.ingredients}\r\n                    price={order.price}/>\r\n                )\r\n            })\r\n        }\r\n\r\n        return(\r\n            <div>\r\n                {orders}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStatetoProps = state =>{\r\n    return{\r\n        orders: state.order.orders,\r\n        loading: state.order.loading,\r\n        token:  state.auth.token,\r\n        userId: state.auth.userId\r\n    }\r\n}\r\n\r\nconst mapDispatchtoProps= dispatch =>{\r\n    return{\r\n        onFetchOrders: (token, userId)=> dispatch(actions.fetchOrders(token, userId))\r\n    }\r\n}\r\n\r\nexport default connect(mapStatetoProps, mapDispatchtoProps)(withErrorHandler(Orders, axios));\r\n\r\n"],"sourceRoot":""}