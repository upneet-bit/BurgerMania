{"version":3,"sources":["components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css"],"names":["CheckoutSummary","props","className","classes","checkoutSummary","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipcode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","formIsValid","inputChangedHandler","event","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","setState","orderHandler","preventDefault","formData","formElementIdentifier","order","ings","price","totalPrice","orderData","userId","onOrderBurger","token","formElementArray","key","this","push","id","config","form","onSubmit","map","formElement","Input","changed","invalid","shouldValidate","disabled","loading","Spinner","Component","connect","burgerBuilder","auth","dispatch","orderActions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","to","purchasedRedirect","purchased","path","match","component","inputElement","inputClasses","InputElement","validationError","ValidationError","Invalid","join","onChange","option","label","module","exports"],"mappings":"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","file":"static/js/3.794f7b71.chunk.js","sourcesContent":["import React from 'react';\r\nimport Burger from '../../Burger/Burger';\r\nimport Button from \"../../UI/Button/Button\";\r\nimport classes from \"./CheckoutSummary.module.css\";\r\n\r\nconst CheckoutSummary = (props) => (\r\n      <div className={classes.checkoutSummary}>\r\n          <h1>We hope it tastes well!!</h1>\r\n          <div style={{width:'100%', margin: 'auto'}}>\r\n                <Burger ingredients={props.ingredients} />\r\n          </div>\r\n          <Button \r\n          btnType=\"Danger\"\r\n          clicked={props.checkoutCancelled}\r\n          >CANCEL</Button>\r\n          \r\n          <Button \r\n          btnType=\"Success\"\r\n          clicked={props.checkoutContinued}\r\n          >CHECKOUT</Button>\r\n\r\n      </div>      \r\n    );\r\n\r\nexport default CheckoutSummary;","import React, { Component } from 'react';\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport classes from \"./ContactData.module.css\";\r\nimport axios from \"../../../axios/axios-orders\";\r\n\r\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\r\nimport Input from '../../../components/UI/Input/Input';\r\nimport { connect } from 'react-redux';\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\r\nimport * as orderActions from \"../../../store/actions\";\r\nimport {updateObject, checkValidity} from \"../../../shared/utility\";\r\n\r\nclass ContactData extends Component {\r\n    state={\r\n        orderForm:{\r\n            name:{\r\n                elementType: 'input',\r\n                elementConfig:{\r\n                    type: 'text',\r\n                    placeholder:'Your Name'\r\n                },\r\n                value:'',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            street: {\r\n                elementType: 'input',\r\n                elementConfig:{\r\n                    type: 'text',\r\n                    placeholder:'Street'\r\n                },\r\n                value:'',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            zipcode: {\r\n                elementType: 'input',\r\n                elementConfig:{\r\n                    type: 'text',\r\n                    placeholder:'Your PIN-CODE'\r\n                },\r\n                value:'',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 5,\r\n                    maxLength:5 \r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            country: {\r\n                elementType: 'input',\r\n                elementConfig:{\r\n                    type: 'text',\r\n                    placeholder:'Country'\r\n                },\r\n                value:'',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig:{\r\n                    type: 'email',\r\n                    placeholder:'Email Id'\r\n                },\r\n                value:'',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n        deliveryMethod:{\r\n            elementType: 'select',\r\n            elementConfig:{\r\n               options:[\r\n                   {value: 'fastest', displayValue: 'Fastest'},\r\n                   {value: 'nearest', displayValue: 'Nearest'}\r\n               ]\r\n            },\r\n            value: 'fastest',  ///'fastest' as in for ui by default we must have something rather than an empty string\r\n            validation:{},\r\n            valid: true\r\n        }\r\n    },\r\n        formIsValid: false\r\n}\r\n   \r\n    inputChangedHandler=(event, inputIdentifier)=>{\r\n\r\n        const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier],{\r\n            value: event.target.value,\r\n            valid:checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\r\n            touched:true\r\n        });\r\n\r\n        const updatedOrderForm= updateObject(this.state.orderForm,{\r\n            [inputIdentifier] : updatedFormElement  ////dynamic approach []:  ....  //by this it implie the properties of the object\r\n        })\r\n\r\n        let formIsValid= true;\r\n        for(let inputIdentifier in updatedOrderForm){\r\n            formIsValid= updatedOrderForm[inputIdentifier].valid && formIsValid;\r\n        }\r\n        // console.log(formIsValid);\r\n        this.setState({orderForm : updatedOrderForm, formIsValid: formIsValid})\r\n    }\r\n\r\n    orderHandler = (event)=>{\r\n        event.preventDefault();\r\n        // console.log(this.props.ings);\r\n\r\n        const formData={};\r\n        for(let formElementIdentifier in this.state.orderForm){\r\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value\r\n        }\r\n\r\n        const order ={\r\n            ingredients: this.props.ings,\r\n            price: this.props.totalPrice,\r\n            orderData: formData,\r\n            userId: this.props.userId\r\n        }\r\n        this.props.onOrderBurger(order, this.props.token);\r\n\r\n    }\r\n\r\n    render() {\r\n        const formElementArray=[];\r\n        for(let key in this.state.orderForm){\r\n                formElementArray.push({\r\n                    id: key,\r\n                    config:this.state.orderForm[key]\r\n                })\r\n        }\r\n\r\n        let form= (\r\n            <form onSubmit={this.orderHandler} >\r\n\r\n            {formElementArray.map(formElement => (\r\n                <Input key={formElement.id}\r\n                elementType={formElement.config.elementType} \r\n                elementConfig={formElement.config.elementConfig} \r\n                changed={(event)=> this.inputChangedHandler(event, formElement.id)}\r\n                invalid={!formElement.config.valid}\r\n                shouldValidate={formElement.config.validation}\r\n                touched={formElement.config.touched}\r\n                value={formElement.config.value} />\r\n            ))}\r\n\r\n            <Button\r\n            disabled={!this.state.formIsValid}\r\n            btnType=\"Success\">\r\n            ORDER </Button>                   \r\n        </form>\r\n        );\r\n\r\n        if(this.props.loading){\r\n            form= <Spinner/>\r\n        }\r\n\r\n        return (\r\n            <div className={classes.ContactData}>\r\n                <h4>Enter your Contact Data</h4>\r\n               {form}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStatetoProps= state =>{\r\n    return{\r\n        ings: state.burgerBuilder.ingredients,\r\n        totalPrice: state.burgerBuilder.totalPrice,\r\n        loading: state.order.loading,\r\n        token : state.auth.token,\r\n        userId: state.auth.userId\r\n    }\r\n};\r\n\r\nconst mapDispatchtoProps = dispatch =>{\r\n   return{\r\n       onOrderBurger: (orderData, token)=> dispatch(orderActions.purchaseBurger(orderData, token))\r\n   }\r\n}\r\n\r\nexport default connect(mapStatetoProps, mapDispatchtoProps)(withErrorHandler(ContactData, axios));","import React, { Component } from 'react';\r\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\r\nimport {Redirect, Route} from \"react-router-dom\";\r\nimport ContactData from './ContactData/ContactData';\r\nimport { connect } from 'react-redux';\r\n\r\nclass Checkout extends Component {\r\n    componentDidMount(){\r\n        // console.log(\"CHECKOUT CALLED!\");\r\n    }\r\n  \r\n    checkoutCancelledHandler = ()=>{\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    checkoutContinuedHandler = ()=>{\r\n        this.props.history.replace('/checkout/contact-data');\r\n    }\r\n\r\n    render() {\r\n        // console.log(this.props.ings);\r\n        let summary= <Redirect to=\"/\" />\r\n\r\n        if(this.props.ings){\r\n            const purchasedRedirect= this.props.purchased ? <Redirect to=\"/checkout\" /> : null;\r\n            summary=(\r\n            <div>\r\n                {purchasedRedirect}\r\n                <CheckoutSummary \r\n                    ingredients={this.props.ings} \r\n                    checkoutCancelled={this.checkoutCancelledHandler}\r\n                    checkoutContinued={this.checkoutContinuedHandler}\r\n                />\r\n                <Route\r\n                path={this.props.match.path +\"/contact-data\"}\r\n                component={ContactData}\r\n                />\r\n            </div>\r\n            )\r\n        }\r\n\r\n        return summary; \r\n    }\r\n}\r\n\r\nconst mapStatetoProps= state =>{\r\n    return{\r\n        ings: state.burgerBuilder.ingredients,\r\n        totalPrice: state.burgerBuilder.totalPrice,\r\n        purchased: state.order.purchased\r\n    }\r\n};\r\n\r\n\r\nexport default connect(mapStatetoProps)(Checkout);","import React from 'react';\r\nimport classes from \"./Input.module.css\";\r\n\r\nconst Input = (props) => {\r\n            let inputElement= null;\r\n            const inputClasses= [classes.InputElement];\r\n            \r\n            let validationError = null;\r\n            if (props.invalid && props.touched) \r\n            {\r\n                validationError = <p className={classes.ValidationError}>Please enter a valid value!</p>;\r\n            }\r\n\r\n\r\n            if(props.invalid && props.shouldValidate && props.touched){\r\n                inputClasses.push(classes.Invalid)\r\n            }\r\n\r\n            switch (props.elementType) {\r\n                case ('input'):\r\n                    inputElement = <input\r\n                     className={inputClasses.join(' ')}\r\n                      {...props.elementConfig} \r\n                      onChange={props.changed}\r\n                      value={props.value} />\r\n                    break;\r\n                case ('textarea'):\r\n                    inputElement = <textarea \r\n                     className={inputClasses.join(' ')} \r\n                     {...props.elementConfig} \r\n                     onChange={props.changed}\r\n                     value={props.value}/>\r\n                    break;\r\n                case ('select'):\r\n                    inputElement=\r\n                    <select\r\n                    className={inputClasses.join(' ')} \r\n                    onChange={props.changed}\r\n                    value={props.value}>\r\n                        {props.elementConfig.options.map(option => (\r\n                            <option key={option.value}\r\n                            value={option.value}>\r\n                                {option.displayValue}\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                    break;\r\n                \r\n                default:\r\n                    inputElement = <input\r\n                     className={inputClasses.join(' ')}\r\n                      {...props.elementConfig} \r\n                      onChange={props.changed}\r\n                      value={props.value}/>\r\n                    break;\r\n            }\r\n\r\n        return(\r\n            <div className={classes.Input}>\r\n                <label className={classes.label} >{props.label}</label>\r\n                {inputElement}\r\n                {validationError}\r\n            </div>\r\n        )\r\n    }\r\n\r\nexport default Input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__2-uFK\",\"Label\":\"Input_Label__36bgy\",\"InputElement\":\"Input_InputElement__fS4JI\",\"Invalid\":\"Input_Invalid__2-_9C\",\"ValidationError\":\"Input_ValidationError__1Z5UV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__2xIu6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__BeJvY\"};"],"sourceRoot":""}