{"version":3,"sources":["containers/Auth/Auth.module.css","containers/Auth/Auth.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css"],"names":["module","exports","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","vaildation","required","isEmail","valid","touched","password","minLength","isSignUp","inputChangedHandler","event","controlName","updatedControls","updateObject","target","checkValidity","setState","switchAuthModeHandler","prevState","SubmitHandler","preventDefault","props","onAuth","this","burgerBuilding","authRedirectPath","onSetRedirectPath","formElementsArray","key","push","id","config","form","map","formElement","changed","invalid","shouldValidate","validation","loading","errorMessage","error","authRedirect","isAuthenticated","to","className","classes","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions","Input","inputElement","inputClasses","InputElement","validationError","ValidationError","Invalid","join","onChange","options","option","displayValue","label"],"mappings":"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","file":"static/js/4.5560a36c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__3k019\"};","import React, { Component } from 'react';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport Input from '../../components/UI/Input/Input';\r\nimport classes from \"./Auth.module.css\";\r\nimport * as actions from \"../../store/actions\";\r\nimport { connect } from 'react-redux';\r\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\r\nimport { Redirect } from 'react-router';\r\nimport { updateObject, checkValidity } from '../../shared/utility';\r\n\r\nclass Auth extends Component {\r\n    state={\r\n        controls:{\r\n            email:{\r\n                elementType: 'input',\r\n                elementConfig:{\r\n                    type: 'text',\r\n                    placeholder:'Your email-id'\r\n                },\r\n                value: '',\r\n                vaildation:{\r\n                    required: true,\r\n                isEmail: true  \r\n                },\r\n                valid :false,\r\n                touched: false\r\n            },\r\n            password:{\r\n                elementType: 'input',\r\n                elementConfig:{\r\n                    type: 'password',\r\n                    placeholder:'Password'\r\n                },\r\n                value: '',\r\n                vaildation:{\r\n                    required: true,\r\n                    minLength: 6    ///Adjust this according to your backend  \r\n                },\r\n                valid :false,\r\n                touched: false\r\n            }\r\n        },\r\n        isSignUp: true\r\n    };\r\n\r\n    componentDidMount(){\r\n        // console.log(\"AUTH HERE CHECKINg ROUTED PARAMS\", this.props.authRedirectPath, this.props.burgerBuilding);\r\n        if(!this.props.burgerBuilding && this.props.authRedirectPath !== '/' ){\r\n            this.props.onSetRedirectPath();\r\n        }\r\n    }\r\n\r\n    inputChangedHandler=(event, controlName)=>{\r\n        const updatedControls = updateObject(this.state.controls,{\r\n            [controlName]: updateObject(this.state.controls[controlName], {\r\n                ...this.state.controls[controlName],\r\n                value: event.target.value,\r\n                valid:checkValidity(event.target.value, this.state.controls[controlName].vaildation),\r\n                touched: true\r\n            })\r\n        });\r\n        this.setState({controls : updatedControls });\r\n    }\r\n\r\n    switchAuthModeHandler =() =>{\r\n        this.setState(prevState =>{\r\n            return{\r\n                isSignUp: !prevState.isSignUp\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n\r\n    SubmitHandler= (event)=>{\r\n        event.preventDefault();\r\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignUp);\r\n    }\r\n\r\n    render() {\r\n        const formElementsArray=[];\r\n        for(let key in this.state.controls){\r\n            formElementsArray.push({\r\n                id: key,\r\n                config:this.state.controls[key]\r\n            });\r\n        }\r\n\r\n        let form= formElementsArray.map(formElement=>(\r\n            <Input\r\n                key={formElement.id}\r\n                elementType={formElement.config.elementType} \r\n                elementConfig={formElement.config.elementConfig} \r\n                changed={(event)=> this.inputChangedHandler(event, formElement.id)}\r\n                invalid={!formElement.config.valid}\r\n                shouldValidate={formElement.config.validation}\r\n                touched={formElement.config.touched}\r\n                value={formElement.config.value} \r\n            />\r\n        ))\r\n\r\n        if(this.props.loading){\r\n            form= <Spinner/>\r\n        }\r\n        \r\n        let errorMessage= null;\r\n        if(this.props.error){\r\n            errorMessage=(\r\n                <p>\r\n                    {this.props.error}\r\n                </p>\r\n            )\r\n        }\r\n\r\n        let authRedirect= null;\r\n        if(this.props.isAuthenticated)(\r\n            authRedirect= <Redirect to={this.props.authRedirectPath} />\r\n        )\r\n\r\n        return (\r\n            <div  className={classes.Auth}>\r\n                {authRedirect}\r\n                {errorMessage}\r\n                <form onSubmit={this.SubmitHandler}>\r\n                    {form}\r\n                <Button btnType=\"Success\"> Submit </Button>\r\n                </form>\r\n                <Button \r\n                clicked={this.switchAuthModeHandler}\r\n                btnType=\"Danger\">SWITCH TO {this.state.isSignUp ? 'SIGN-IN' : 'SIGN-UP' } </Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps= (state)=>{\r\n    return{\r\n        loading: state.auth.loading,\r\n        error  : state.auth.error,\r\n        isAuthenticated: state.auth.token !== null,\r\n        burgerBuilding: state.burgerBuilder.building,\r\n        authRedirectPath: state.auth.authRedirectPath\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch =>{\r\n    return{\r\n        onAuth : (email, password, isSignUp )=> dispatch(actions.auth(email, password, isSignUp )),\r\n        onSetRedirectPath: ()=> dispatch(actions.setAuthRedirect('/'))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","import React from 'react';\r\nimport classes from \"./Input.module.css\";\r\n\r\nconst Input = (props) => {\r\n            let inputElement= null;\r\n            const inputClasses= [classes.InputElement];\r\n            \r\n            let validationError = null;\r\n            if (props.invalid && props.touched) \r\n            {\r\n                validationError = <p className={classes.ValidationError}>Please enter a valid value!</p>;\r\n            }\r\n\r\n\r\n            if(props.invalid && props.shouldValidate && props.touched){\r\n                inputClasses.push(classes.Invalid)\r\n            }\r\n\r\n            switch (props.elementType) {\r\n                case ('input'):\r\n                    inputElement = <input\r\n                     className={inputClasses.join(' ')}\r\n                      {...props.elementConfig} \r\n                      onChange={props.changed}\r\n                      value={props.value} />\r\n                    break;\r\n                case ('textarea'):\r\n                    inputElement = <textarea \r\n                     className={inputClasses.join(' ')} \r\n                     {...props.elementConfig} \r\n                     onChange={props.changed}\r\n                     value={props.value}/>\r\n                    break;\r\n                case ('select'):\r\n                    inputElement=\r\n                    <select\r\n                    className={inputClasses.join(' ')} \r\n                    onChange={props.changed}\r\n                    value={props.value}>\r\n                        {props.elementConfig.options.map(option => (\r\n                            <option key={option.value}\r\n                            value={option.value}>\r\n                                {option.displayValue}\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                    break;\r\n                \r\n                default:\r\n                    inputElement = <input\r\n                     className={inputClasses.join(' ')}\r\n                      {...props.elementConfig} \r\n                      onChange={props.changed}\r\n                      value={props.value}/>\r\n                    break;\r\n            }\r\n\r\n        return(\r\n            <div className={classes.Input}>\r\n                <label className={classes.label} >{props.label}</label>\r\n                {inputElement}\r\n                {validationError}\r\n            </div>\r\n        )\r\n    }\r\n\r\nexport default Input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__2-uFK\",\"Label\":\"Input_Label__36bgy\",\"InputElement\":\"Input_InputElement__fS4JI\",\"Invalid\":\"Input_Invalid__2-_9C\",\"ValidationError\":\"Input_ValidationError__1Z5UV\"};"],"sourceRoot":""}